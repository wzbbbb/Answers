...........Objective:

To create a complete maintenance package for Dollar Universe Companies in test environment, which may not run in daily basis and may be started up or shutted down randomly. 
The package should be flexible enough to be applied to different UNIX OSs and customized $U installations. 
The package should achieve the following goals:
1). Once applied, remove the risk of system full caused by $U
2). Once applied, completely automatic operations, no human intervenation needed.
3). Easy to install and configure; specify a few parameters at the beginning .

Overall, with this package installed, all of the testing $U should be maintenace free.


...........Overview,

1). Package contents (first draft)

DuDetect.sh
LogCleaning.sh
Task_IU_PUR.sh **
DataBackup.sh **
ReorgEnabler.sh **

2). Use a centralized configuration file, DuMaint.conf, to record managed $U Companies and related parameters.

3). Installation procedure

==Detecting existing $U Companies
==Creating the configuration file 
==Inserting the model task **
==Inserting the entries to the crontab
==Modifying the startup script to run reorganization at the starting of a $U Company. ** 

Note: modules ended with ** is left to be implemented in the second version of this package. 

4). Possible steps in cron:

==$U Company detection
==Log backup
==Data back

5). User consideration

root may be the only choice for this package.


...........Modules

1. $U Company detection

prerequisite: 
1). Access (rx) right to all of the possible directories of existing $U Companies.
2). SMTP service is started and well configured.

Implementation:
The script will "find" all of the "uxsetenv" files, and check the definations of "$UXMGRs". If a $UXMGR points to the same directory as the uxsetenv located, then we believe we have found a $U Company.
If the script couldn't find the DuMaint.conf (for example, when the script run for the first time), it will create one and also a log file, DuFound.log. Those files both contain the same information, the found $U Companies.
If the DuMaint.conf exists already, the script will only recreate the DuFound.log file with the new detection results. It then compares the two files, DuMaint.conf and DuFound.log. If there is a difference between the two files, it will send the "diff" result within an email to the $U administrator.

Scheduling: Daily, every time before any other module runs.

Monitoring: Send an information email to the $U administrator if there is a difference between the configuration file and the new detection results. 


2. Log Cleaning 
 
prerequisite: 
1). The updated configuration file.
2). The "rwx" access right to all of the log files and directories. root?
3). Specify an output directory as a variable, if backup is required.
4). The "rwx" right to the output dirctory.
5). SMTP service is started and well configured.

Implementation:
It will check the DuMaint.conf, to find out the information about the registerd $U Companies. Then, it will load the concerned $U Env once a time.
It will check if log backup is required. 
If so, backup and compress all of the log files and empty the log directories. The output file names should contain the "date" and the company name and be stored in the pre-specified directory. 
Otherwise, it just removes all the log files.
If one of the directories doesn't exist, it will continue to try all of the others, and send the $U administrator a warning email.

Scheduling: Daily

Monitoring: Send a warning email the $U administrator if only some directories are missing, possiblely caused by a companies has been deleted.


2. Cleaning old records from DTA files with IU_PUR  **
 
prerequisite:
1). The updated configuration file.
2). A $U admin user that can perform $UXEXE/uxins (manually at the beginning)
3). Allow the parameters of IU_PUR to be specified at the installation? Probabily not.
4). Define the default of parameters for IU_PUR.
5). Check to make sure the lib link is coherent.
6). SMTP service is started and well configured.

Implementation:

Need to check the lib link, or have to insert the task after a $U Company has started.
Creating a model task and inserting the task to all companies, which schedules IU_PUR every day with a launch window 1am - 11pm. So, whenever the company is started, the task has a chance to run.

Scheduling: Daily

Monitoring: Send a warning email the $U administrator if only exitted with an error


3. reorganization  **

prerequisite: 
1). The updated configuration file.
2). Access (rw) right to the uxstartup_gen file
3). SMTP service is started and well configured.

Implementation:
During installation, update the uxstartup_gen file to insert some scripts. Later, every time the $U starts up, the $U admin will be prompted to answer if a reorganization is needed. If yes, the reorganization procedure will run. In this way, we supposed that the lib link is already corrected before the $U start.

Scheduling: N/A

Monitoring: Will have reorg.logs saved in $UXLEXs.


4. $U Company shutdown **

prerequisite: 
1). The updated configuration file.
2). $U admin user
3). detect if the $U Company is started.
4). SMTP service is started and well configured.

Implementation:
Refer to the "DuStop" script. First check if a company is started. If yes, check the DuMaint.conf file to load its Env. Then run the $UXMGR/uxshutdown.

Scheduling: every time before running the data backup.

Monitoring: send the $U administrator an email if a company was failed to stop.


5. Data files backup **

prerequisite: 

1). The updated configuration file.
2). All companies are shutted down.
3). Access (rx) rigth for all of the company directories.
4). SMTP service is started and well configured.

Implementation:

Shudown all companies.
for each compay in ... ... ...; do
	if yes, load the environment of a company 2>> logfile
			stop it with "DuStop". 2>> logfile 
		else, load the environment of a company 2>> logfile 			
	tar the whole company directory to the output direcotry 2>> logfile

	# unload the environment 2>> logfile
done

Scheduling: Weekly

Monitoring: Send a warning email the $U administrator if only exitted with an error

